/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library;

import java.sql.*;
import java.util.*;
import java.util.Date;
import java.util.Calendar;
import java.text.SimpleDateFormat;

import java.util.logging.Level;
import java.util.logging.Logger;
import static library.Login.uid;   // This is important line to be able to use the public static variable uid in this form

import net.proteanit.sql.DbUtils;  // for this to work I need rs2xml.jar file to be added to project libraries RightClick --> Add JAR/folder
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.Document;
import java.io.*; // to work with files

/**
 *
 * @author HanaKod
 */
public class Librarians extends javax.swing.JFrame {

    /**
     * Creates new form Members
     */
    public Librarians() {
    initComponents();
    //to centralize the form on screen
    this.setLocationRelativeTo(null);
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        close = new javax.swing.JLabel();
        Mini = new javax.swing.JLabel();
        JTabbed = new javax.swing.JTabbedPane();
        addMembers = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        addMember = new javax.swing.JButton();
        UserName = new javax.swing.JTextField();
        fullName = new javax.swing.JTextField();
        phone = new javax.swing.JTextField();
        Email = new javax.swing.JTextField();
        tempPwd = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        Jscroll = new javax.swing.JScrollPane();
        localAdd = new javax.swing.JTextArea();
        Error = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        bookCatigories = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        changeCatigory = new javax.swing.JComboBox<>();
        NewCat = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        Update = new javax.swing.JButton();
        Insert = new javax.swing.JButton();
        DeleteSelectedItem = new javax.swing.JButton();
        InsertBooks = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        insertTable = new javax.swing.JTable();
        Insert1 = new javax.swing.JButton();
        insertCat = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        UpdateBookInfo = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        Delete = new javax.swing.JButton();
        Modify = new javax.swing.JButton();
        bookName = new javax.swing.JTextField();
        catigory = new javax.swing.JComboBox<>();
        Search = new javax.swing.JButton();
        bookKeeping = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        bookName1 = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        bookName2 = new javax.swing.JTextField();
        bookStatus = new javax.swing.JComboBox<>();
        changeStatus = new javax.swing.JButton();
        ClockInOut = new javax.swing.JPanel();
        clockIn = new javax.swing.JButton();
        clockOut = new javax.swing.JButton();
        message = new javax.swing.JLabel();
        logOut = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 153, 255));
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 153, 255));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pic/Lib.png"))); // NOI18N
        jLabel1.setText("UM LIBRARY");
        jLabel1.setToolTipText("");

        close.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        close.setForeground(new java.awt.Color(255, 255, 255));
        close.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        close.setText("X");
        close.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeMouseClicked(evt);
            }
        });

        Mini.setFont(new java.awt.Font("Arial Black", 0, 36)); // NOI18N
        Mini.setForeground(new java.awt.Color(255, 255, 255));
        Mini.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Mini.setText("-");
        Mini.setToolTipText("");
        Mini.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Mini.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MiniMouseClicked(evt);
            }
        });

        JTabbed.setBackground(new java.awt.Color(0, 153, 255));

        addMembers.setBackground(new java.awt.Color(255, 255, 255));
        addMembers.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        addMembers.setInheritsPopupMenu(true);

        jLabel5.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel5.setText("User name");

        jLabel6.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel6.setText("Full name");

        jLabel7.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel7.setText("Local address");

        jLabel8.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel8.setText("Phone number");

        jLabel9.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel9.setText("E-mail address");

        jLabel10.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel10.setText("Temporary password");

        addMember.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        addMember.setText("Register new member");
        addMember.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addMemberMouseClicked(evt);
            }
        });

        UserName.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        fullName.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        phone.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        Email.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        tempPwd.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Calibri Light", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 204));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("One Year Membership");

        Jscroll.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        localAdd.setColumns(20);
        localAdd.setRows(5);
        Jscroll.setViewportView(localAdd);

        Error.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        Error.setForeground(new java.awt.Color(255, 51, 51));

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pic/Library1.png"))); // NOI18N

        javax.swing.GroupLayout addMembersLayout = new javax.swing.GroupLayout(addMembers);
        addMembers.setLayout(addMembersLayout);
        addMembersLayout.setHorizontalGroup(
            addMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMembersLayout.createSequentialGroup()
                .addGroup(addMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addMembersLayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addGroup(addMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60)
                        .addGroup(addMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Email, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(phone, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Jscroll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                            .addComponent(fullName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(UserName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tempPwd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Error, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addMembersLayout.createSequentialGroup()
                        .addGap(386, 386, 386)
                        .addComponent(jLabel2))
                    .addGroup(addMembersLayout.createSequentialGroup()
                        .addGap(342, 342, 342)
                        .addComponent(addMember, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addMembersLayout.setVerticalGroup(
            addMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMembersLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addGap(40, 40, 40)
                .addComponent(Error)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addMembersLayout.createSequentialGroup()
                        .addGroup(addMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(UserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(addMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(addMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(Jscroll, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(addMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(29, 29, 29)
                        .addGroup(addMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(27, 27, 27)
                        .addGroup(addMembersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tempPwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addGap(36, 36, 36)
                        .addComponent(addMember))
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(3202, Short.MAX_VALUE))
        );

        JTabbed.addTab("Add members", null, addMembers, "");

        bookCatigories.setBackground(new java.awt.Color(255, 255, 255));
        bookCatigories.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel11.setText("New catigory Name");

        changeCatigory.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        changeCatigory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select catigory" }));
        changeCatigory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                changeCatigoryItemStateChanged(evt);
            }
        });

        NewCat.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel12.setText("Choose catigory to Update");

        Update.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        Update.setText("Update the selected catigory");
        Update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UpdateMouseClicked(evt);
            }
        });

        Insert.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        Insert.setText("Insert new catigory ");
        Insert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InsertMouseClicked(evt);
            }
        });

        DeleteSelectedItem.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        DeleteSelectedItem.setText("Delete the selected catigory");
        DeleteSelectedItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeleteSelectedItemMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout bookCatigoriesLayout = new javax.swing.GroupLayout(bookCatigories);
        bookCatigories.setLayout(bookCatigoriesLayout);
        bookCatigoriesLayout.setHorizontalGroup(
            bookCatigoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookCatigoriesLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(jLabel11)
                .addGap(75, 75, 75)
                .addGroup(bookCatigoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NewCat, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeCatigory, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65)
                .addGroup(bookCatigoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DeleteSelectedItem)
                    .addComponent(Insert)
                    .addComponent(Update))
                .addContainerGap(224, Short.MAX_VALUE))
            .addGroup(bookCatigoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(bookCatigoriesLayout.createSequentialGroup()
                    .addGap(85, 85, 85)
                    .addComponent(jLabel12)
                    .addContainerGap(805, Short.MAX_VALUE)))
        );
        bookCatigoriesLayout.setVerticalGroup(
            bookCatigoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookCatigoriesLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(bookCatigoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeCatigory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteSelectedItem))
                .addGap(76, 76, 76)
                .addGroup(bookCatigoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NewCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(Update))
                .addGap(37, 37, 37)
                .addComponent(Insert)
                .addContainerGap(3447, Short.MAX_VALUE))
            .addGroup(bookCatigoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(bookCatigoriesLayout.createSequentialGroup()
                    .addGap(80, 80, 80)
                    .addComponent(jLabel12)
                    .addContainerGap(3627, Short.MAX_VALUE)))
        );

        JTabbed.addTab("Update book catigories", bookCatigories);

        InsertBooks.setBackground(new java.awt.Color(255, 255, 255));
        InsertBooks.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        jScrollPane2.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        insertTable.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        insertTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        insertTable.setRowHeight(30);
        jScrollPane2.setViewportView(insertTable);

        Insert1.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        Insert1.setText("Save");
        Insert1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Insert1MouseClicked(evt);
            }
        });

        insertCat.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        insertCat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select catigory" }));

        jLabel4.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel4.setText("Select a catigory to which you want to inser the new books");

        javax.swing.GroupLayout InsertBooksLayout = new javax.swing.GroupLayout(InsertBooks);
        InsertBooks.setLayout(InsertBooksLayout);
        InsertBooksLayout.setHorizontalGroup(
            InsertBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InsertBooksLayout.createSequentialGroup()
                .addGroup(InsertBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InsertBooksLayout.createSequentialGroup()
                        .addGap(450, 450, 450)
                        .addComponent(Insert1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(InsertBooksLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(InsertBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(InsertBooksLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(35, 35, 35)
                                .addComponent(insertCat, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 961, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        InsertBooksLayout.setVerticalGroup(
            InsertBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InsertBooksLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(InsertBooksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(Insert1)
                .addContainerGap(3213, Short.MAX_VALUE))
        );

        JTabbed.addTab("Add new books", InsertBooks);

        UpdateBookInfo.setBackground(new java.awt.Color(255, 255, 255));
        UpdateBookInfo.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        jScrollPane1.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        bookTable.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        bookTable.setRowHeight(30);
        bookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(bookTable);

        jLabel3.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel3.setText("Book name or part of name");

        Delete.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        Delete.setText("Delete");
        Delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeleteMouseClicked(evt);
            }
        });

        Modify.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        Modify.setText("Update");
        Modify.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ModifyMouseClicked(evt);
            }
        });

        bookName.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        catigory.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        catigory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select catigory" }));

        Search.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        Search.setText("Search");
        Search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout UpdateBookInfoLayout = new javax.swing.GroupLayout(UpdateBookInfo);
        UpdateBookInfo.setLayout(UpdateBookInfoLayout);
        UpdateBookInfoLayout.setHorizontalGroup(
            UpdateBookInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateBookInfoLayout.createSequentialGroup()
                .addGap(322, 322, 322)
                .addComponent(Modify, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(UpdateBookInfoLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bookName, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(catigory, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(111, 111, 111))
            .addGroup(UpdateBookInfoLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 988, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        UpdateBookInfoLayout.setVerticalGroup(
            UpdateBookInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateBookInfoLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(UpdateBookInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(bookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search)
                    .addComponent(catigory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addGroup(UpdateBookInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Modify)
                    .addComponent(Delete))
                .addContainerGap(3205, Short.MAX_VALUE))
        );

        JTabbed.addTab("Update book information", UpdateBookInfo);

        bookKeeping.setBackground(new java.awt.Color(255, 255, 255));
        bookKeeping.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel13.setText("Book ID");

        bookName1.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        SearchButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        SearchButton.setText("Search");
        SearchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchButtonMouseClicked(evt);
            }
        });

        bookName2.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        bookStatus.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        bookStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Borrowed" }));

        changeStatus.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        changeStatus.setText("Change book state");
        changeStatus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                changeStatusMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout bookKeepingLayout = new javax.swing.GroupLayout(bookKeeping);
        bookKeeping.setLayout(bookKeepingLayout);
        bookKeepingLayout.setHorizontalGroup(
            bookKeepingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookKeepingLayout.createSequentialGroup()
                .addGroup(bookKeepingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bookKeepingLayout.createSequentialGroup()
                        .addGap(301, 301, 301)
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(bookName1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bookKeepingLayout.createSequentialGroup()
                        .addGap(197, 197, 197)
                        .addComponent(bookName2, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(bookStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(changeStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        bookKeepingLayout.setVerticalGroup(
            bookKeepingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookKeepingLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(bookKeepingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(bookName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton))
                .addGap(110, 110, 110)
                .addGroup(bookKeepingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookName2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeStatus))
                .addContainerGap(3510, Short.MAX_VALUE))
        );

        JTabbed.addTab("Book keeping", bookKeeping);

        ClockInOut.setBackground(new java.awt.Color(255, 255, 255));
        ClockInOut.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N

        clockIn.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        clockIn.setText("Clock IN");
        clockIn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clockInMouseClicked(evt);
            }
        });

        clockOut.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        clockOut.setText("Clock OUT");
        clockOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clockOutMouseClicked(evt);
            }
        });

        message.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        message.setText("Register your attendance: Clock IN fro arrival, Clock OUT for leaving");

        javax.swing.GroupLayout ClockInOutLayout = new javax.swing.GroupLayout(ClockInOut);
        ClockInOut.setLayout(ClockInOutLayout);
        ClockInOutLayout.setHorizontalGroup(
            ClockInOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClockInOutLayout.createSequentialGroup()
                .addGap(208, 208, 208)
                .addGroup(ClockInOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ClockInOutLayout.createSequentialGroup()
                        .addComponent(clockIn)
                        .addGap(45, 45, 45)
                        .addComponent(clockOut)))
                .addContainerGap(338, Short.MAX_VALUE))
        );
        ClockInOutLayout.setVerticalGroup(
            ClockInOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClockInOutLayout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(message)
                .addGap(58, 58, 58)
                .addGroup(ClockInOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clockIn)
                    .addComponent(clockOut))
                .addContainerGap(3514, Short.MAX_VALUE))
        );

        JTabbed.addTab("Clock in / Clock out", ClockInOut);

        logOut.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        logOut.setForeground(new java.awt.Color(255, 255, 255));
        logOut.setText("LogOut");
        logOut.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logOutMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(286, 286, 286)
                .addComponent(logOut)
                .addGap(34, 34, 34)
                .addComponent(Mini, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(close, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
            .addComponent(JTabbed)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Mini, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(logOut))
                        .addGap(2, 2, 2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(close, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(JTabbed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(232, 232, 232))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        // Form load code:
        // To access the uid variable from another class; first, declare it outside the methods but inside the main class. and inside this class I write import static library.Login.uid;
        // this means I want to import static variable and I must define the full path to it packageName.className.variableName.   
       // Note: insertTable.addRowSelectionInterval(0, 0); // this command put a selection color on the first row (row with index 0 starts at 0 and ends at 0), if I want to select 2 or 3 just type the index of last row (0, 3).

        try 
         {
            MyConnection conn =new MyConnection();
            conn.connect();
            Statement st = conn.con.createStatement();
            // To get table headers from mysql to jtable with no data just the header
            //ResultSet rs = st.executeQuery("Select null as 'Book name', null as 'Author', null as 'Edition', null as 'Catigory' from books inner join bookCatigory where books.catID = bookCatigory.catID"); // this works nice but will give me as much null rows as the number of books in database, and I want maximum 10 empty rows 
            //ResultSet rs = st.executeQuery("Select bookName as 'Book name', author as 'Author', edition as 'Edition', catName as 'Catigory' from books inner join bookCatigory where books.catID = bookCatigory.catID and books.bookID=0"); // this works nice but will give me 0 null rows so the user will not be able to write anything in the table.
            ResultSet rs = st.executeQuery("Select null as 'Book name', null as 'Author', null as 'Edition' from books inner join bookCatigory where books.catID = bookCatigory.catID limit 10"); // this will select 10 empty or null rows if the original table in myql contains >=10 rows if less the generated null rows will be equal to what exist in mysql tsble.
            insertTable.setModel(DbUtils.resultSetToTableModel(rs));
               
    
            // to fill comboBoxes
            ResultSet rs1 = st.executeQuery("select * from bookCatigory");
            while(rs1.next())
            {
             catigory.addItem(rs1.getString("CatName"));
             insertCat.addItem(rs1.getString("CatName"));
             changeCatigory.addItem(rs1.getString("CatName"));
             
            }
            
            
            st.close();
            conn.con.close();
            
         }
        
        
        catch (SQLException ex) 
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_formWindowOpened

    
    
    private void closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseClicked
        
        // To close the form X label:
        setVisible(false); 
        dispose();
        System.exit(0);
    }//GEN-LAST:event_closeMouseClicked

    
    
    private void MiniMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MiniMouseClicked
       
        // To minimize the form window:
        this.setState(this.ICONIFIED);  
    }//GEN-LAST:event_MiniMouseClicked

    
    
    private void addMemberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMemberMouseClicked
        // To Add member create new membership
        String Start = "";
        String Expire = "";
        try 
         {
            MyConnection conn =new MyConnection();
            conn.connect();
            Statement st = conn.con.createStatement();
            // To add new member data
            // 0. To chack if the user name already exist or not. User name must be unique.
            ResultSet rs =st.executeQuery("Select UserName from login");
            while(rs.next())
            {
              if(rs.getString("UserName").equals(UserName.getText()))
              {
               Error.setText("This user name is invalid. Please try another one!");
              }
            }
            
            // 1. add data to login table to create uid
            st.executeUpdate("insert into login (UserName, Password, acc_ID) values ('" + UserName.getText() + "', '" + tempPwd.getText() + "', 3)");
            
            // 2. select UID from the login table so I can save it in userInfo table userInfo.UID is foriegn 
            ResultSet rs1 =st.executeQuery("select UID from login where UserName = '" + UserName.getText() + "'");
            rs1.next();
            int newUid = rs1.getInt("UID");
            
            // 3. Now insert data including the newUid to userInfo table
            st.executeUpdate("insert into userInfo values (" + newUid + ", '" + fullName.getText() + "', '" + localAdd.getText() + "', '" + phone.getText() + "', '" + Email.getText() + "')");
            
            // 4. Calculate membership start date and expiration date (1 year membership)
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/YYYY");
            // a. The current date
            Date today = new Date();
            Start = sdf.format(today);
            
            // b.The end date we obtain it by adding number of days to the current date using calendar class
            Calendar cal = Calendar.getInstance();
            cal.setTime(today);
            cal.add(Calendar.DATE, 365);  //Calendar.DATE is the date of month already specified in the calendar
            Date NextDate = cal.getTime();
            Expire = sdf.format(NextDate);
            
            // 5. Insert the membership duration to memberShip table
            st.executeUpdate("insert into memberShip values (" + newUid + ", '" + Start + "', '" + Expire + "')");
                                    
            st.close();
            conn.con.close();
            
         }
        
        
        catch (SQLException ex) 
        {
            Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(Librarians.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //6. Make a report of user memberShip for user & library reference
        try
        {
         // Create file:
          // a. Get the current path where this project is saved inside the computer
          String CurrentProjectPath = System.getProperty("user.dir");
          
          // b. Create a file and save it the path stored in the string variable
          File f =new File (CurrentProjectPath + "\\src\\Reports\\" + UserName.getText() + ".txt");
          
          if(f.exists())
          {
           JOptionPane.showMessageDialog(null, "Report for this user is already exist!");  // Message box
          }
          else
          {
           PrintWriter pw = new PrintWriter(f);
           pw.println("                             Welcome " + UserName.getText() + " This is your new membership             Date: " + Start);
           pw.println("Full name: " + fullName.getText());
           pw.println("Local address: " + localAdd.getText());
           pw.println("Phone number: " + phone.getText());
           pw.println("Email: " + Email.getText());
           pw.println("Your temporary password: " + tempPwd.getText());
           pw.println("Your membership Expires at: " + Expire);
           pw.close();
          }
        }
        
        
        catch(Exception e)
        {
          System.out.println("File output error");
        }
        
        
        // 7. clear all the fields to avoid repeatition by mistake:
        UserName.setText("");
        fullName.setText("");
        localAdd.setText("");
        phone.setText("");
        Email.setText("");
        tempPwd.setText("");
        // 8. Show sucess message
        JOptionPane.showMessageDialog(null, "sucessfull");  // Message box
    }//GEN-LAST:event_addMemberMouseClicked

    
    public int [] bookID;
    private void SearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchMouseClicked
        // Book Search
        try
        {
            MyConnection conn =new MyConnection();
            conn.connect();
            Statement st = conn.con.createStatement();
            
            ResultSet rs = st.executeQuery("select bookID as 'Number', bookName as 'Book name', author as 'Author', edition as 'Edition', bookStatus as 'Availability' from books inner join bookCatigory where books.CatID = bookCatigory.CatID and (CatName = '" + catigory.getSelectedItem().toString() + "' and bookName like '" + bookName.getText() + "%')");
            bookTable.setModel(DbUtils.resultSetToTableModel(rs));
                        
            int i=0;
            while(rs.next())
            {
             bookID[i] = rs.getInt("bookID");   // until now I did not need it
             i++;
            }
            
            //anylabel.setText(catigory.getSelectedItem().toString());
            st.close();
            conn.con.close();

        }

        catch (SQLException ex)
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ClassNotFoundException ex)
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SearchMouseClicked

    
    
    private void Insert1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Insert1MouseClicked
        
        // To insert new books (but first check their existance I did not do the check part do it later. Do it using a while loop and boolean function)
        
        int catID=0; 
        // I don't need the array anymore, I just create it to check the values before inserting into mysql tables
        //String [][] bookData = new String [insertTable.getRowCount()][insertTable.getColumnCount()];  //jtableName.getRowCount() will give the total number of all 
        // table rows not only the selected ones..... jtableName.getColumnCount() will give the total number of all table columns
        
        try
        {
            MyConnection conn =new MyConnection();
            conn.connect();
            Statement st = conn.con.createStatement();
            
            if(!insertCat.getSelectedItem().toString().equals("Select catigory")) // to avoid error that will happen as a result of choosing select catigory text which is unknow in mysql.
            {
              ResultSet rs = st.executeQuery("Select * from bookcatigory where CatName = '" + insertCat.getSelectedItem().toString() + "'");
              rs.next();
              catID = rs.getInt("catID");
              //System.out.println(catID);
            
              // to insert data to mysql using parameters and (?) for values
              PreparedStatement pst=conn.con.prepareStatement("insert into books (catID, bookName, author, edition, bookStatus) values (?,?,?,?,?)");  // prepareStatment, instead of createStatement, allows me to use parameters and (?) in the place of insert values which makes the code more readable and easier to avoid errors with the + and quotations...
              
              String value;
              for(int i = 0; i < insertTable.getRowCount(); i++)
               {    
                 for(int y = 0; y < insertTable.getColumnCount(); y++)
                 {       
                   if(insertTable.getValueAt(i, y) == null && insertTable.getValueAt(i, 0) != null) // here the object is null I did not convert it to string
                    {
                      //bookData[i][y] = " ";
                      //System.out.print(bookData[i][y] + " ");
                      value = " ";
                      pst.setInt(1, catID ); 
                      pst.setString(y+2, value);
                      pst.setString(5, "Available"); 
                    }
                   else if(insertTable.getValueAt(i, 0) != null)
                    {
                      // bookData[i][y] = insertTable.getValueAt(i, y).toString();  // I created the array to test the code before inserting into dataBase, now I don't need it any more.
                      //System.out.print(bookData[i][y] + " ");
                      value = insertTable.getValueAt(i, y).toString();
                      pst.setInt(1, catID ); 
                      pst.setString(y+2, value);  // Important note: y+2 refere to the parameter index which start from 1, not the column index (Take care).
                      pst.setString(5, "Available");  
                    }                  
                 }
                 if(insertTable.getValueAt(i, 0) != null)
                 pst.execute(); // a. The execution in my case where using the (y) loop to fill column, then execution must happen outside the (y) loop and inside the (i) 
                             // loop. so the execution will happen after all parameters (columns) get values in each row, then repeat the process for each row 
                             // (rows counted by (i) loop & columns are counted by the (y) loop.
                             // b. Moreover I put this condition on execution, so it will not repeat inserting the same row (i) times and ignor inserting any row that 
                             // does not contain book name. so only execute insertion of rows that have book name and ignore any row with null value at this column. 
                             // follow the debagur without this condition to remember what I mean :P
               }
                 // this to clear all table cells
                for(int x = 0; x < insertTable.getRowCount(); x++)
                 {
                    for(int y = 0; y < insertTable.getColumnCount(); y++)
                   {
                     insertTable.setValueAt(null, x, y);
                   }
                 }            
              
                pst.close();
                conn.con.close();
              
              JOptionPane.showMessageDialog(null, "The books list has been added successfully!"); 
            }
            
            else
            {
              JOptionPane.showMessageDialog(null, "Please select proper catigory !");
            }
        }

        
       catch (SQLException ex)
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ClassNotFoundException ex)
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
           
    }//GEN-LAST:event_Insert1MouseClicked

    
    
    private void ModifyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ModifyMouseClicked
        // Update table data
        int catID = 0;
        try
        {
            MyConnection conn =new MyConnection();
            conn.connect();
            Statement st = conn.con.createStatement();
            ResultSet rs = st.executeQuery("Select * from bookcatigory where CatName = '" + catigory.getSelectedItem().toString() + "'");
            rs.next();
            catID = rs.getInt("catID"); // I did not use it but will be useful when I think in a way to change the catigory of just selected books just add new combo labeled as new catigory, and create new button to change catigory of the selected box. dont write the code in the update button.
            
            PreparedStatement pst=conn.con.prepareStatement("Update books set bookName = ?, author = ?, edition = ? where bookID = ?");
            
            int selectedRowIndex = bookTable.getSelectedRow(); // I dont need these 2 variables any more. just leave them to know hte code ^^
            int selectedColumnIndex = bookTable.getSelectedColumn();
            if(bookTable.isEditing())
            {
               JOptionPane.showMessageDialog(null, "the cell is active in the editing mode. Please click anywhere in the table to set the new value in the cell!"); 
            }
            else
            {
              for(int i = 0; i < bookTable.getRowCount(); i++)
               {
                 pst.setString(1, bookTable.getValueAt(i, 1).toString());  
                 pst.setString(2, bookTable.getValueAt(i, 2).toString());
                 pst.setString(3, bookTable.getValueAt(i, 3).toString());
                 pst.setString(4, bookTable.getValueAt(i, 0).toString());
                 pst.executeUpdate();
               }
              
             JOptionPane.showMessageDialog(null, "Your changes have been saved successfully");
            }
            
            pst.close();
            conn.con.close();

        }

        catch (SQLException ex)
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ClassNotFoundException ex)
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_ModifyMouseClicked

    
    
    private void bookTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookTableMouseClicked
        // This code to prevent the user from clicking specific columns in the table to edit them
        int selectedColumnIndex = bookTable.getSelectedColumn();
            
        if (selectedColumnIndex == 0 || selectedColumnIndex == 4)
         {
           JOptionPane.showMessageDialog(null, "This column is not editable !");
         }
        
    }//GEN-LAST:event_bookTableMouseClicked

    
    
    private void DeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteMouseClicked
        // To delete the selected rows
        try
        {
          MyConnection conn =new MyConnection();
          conn.connect();
          PreparedStatement pst=conn.con.prepareStatement("Delete from books where bookID = ?");
                             
          for(int i = 0; i < bookTable.getSelectedRowCount(); i++)
          {    
            pst.setString(1, bookTable.getValueAt(i, 0).toString());
            pst.executeUpdate();
          }
          
            Statement st = conn.con.createStatement();
            
            ResultSet rs = st.executeQuery("select bookID as 'Number', bookName as 'Book name', author as 'Author', edition as 'Edition', bookStatus as 'Availability' from books inner join bookCatigory where books.CatID = bookCatigory.CatID and (CatName = '" + catigory.getSelectedItem().toString() + "' and bookName like '" + bookName.getText() + "%')");
            bookTable.setModel(DbUtils.resultSetToTableModel(rs));
                        
            int i=0;
            while(rs.next())
            {
             bookID[i] = rs.getInt("bookID");   // until now I did not need it
             i++;
            }
            
            //anylabel.setText(catigory.getSelectedItem().toString());
            pst.close();
            conn.con.close();
          
        }
        
        catch (SQLException ex)
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ClassNotFoundException ex)
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
          
    }//GEN-LAST:event_DeleteMouseClicked

    
    
    private void DeleteSelectedItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteSelectedItemMouseClicked
        // To delete selected catigory
        try 
         {
            MyConnection conn =new MyConnection();
            conn.connect();
            Statement st = conn.con.createStatement();
            // to get catID
            ResultSet rs = st.executeQuery("select * from bookCatigory where catName = '" + changeCatigory.getSelectedItem().toString() + "'");
            rs.next();
            int catID = rs.getInt("catID");
           
            st.executeUpdate("Delete from bookCatigory where catID = " + catID);  // to delete the selected item from dataBase
            changeCatigory.removeItem(changeCatigory.getSelectedItem());  // to remove the selected item from combobox list
            NewCat.setText("");
            
            JOptionPane.showMessageDialog(null, "The selected catigory has been deleted successfully"); 
            
            st.close();
            conn.con.close();
            
         }
        
        
        catch (SQLException ex) 
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_DeleteSelectedItemMouseClicked

    
    
    private void UpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdateMouseClicked
        // To change catigory name
        try 
         {
            MyConnection conn =new MyConnection();
            conn.connect();
            Statement st = conn.con.createStatement();
            
            // to get catID
            ResultSet rs = st.executeQuery("select * from bookCatigory where catName = '" + changeCatigory.getSelectedItem().toString() + "'");
            rs.next();
            int catID = rs.getInt("catID");
            int itemIndex = changeCatigory.getSelectedIndex();
            String value = NewCat.getText();
            st.executeUpdate("update bookCatigory set catName = '" + value + "' where catID = " + catID);  //  
            
            
            changeCatigory.insertItemAt(value, itemIndex);   // to add the new value at the same index, so it looks like it replaces the value. I must add the item at the index, then remove the old item.
            changeCatigory.removeItemAt(itemIndex+1);  // to remove the old value from the combobox specified index+1. why +1, because the new item took the the specified index shifting the old item to the next inex, so to remove the old item I amust add 1 to teh index.
            
            NewCat.setText("");
            JOptionPane.showMessageDialog(null, "The selected catigory has been updated successfully"); 
            
            st.close();
            conn.con.close();
            
         }
        
        
        catch (SQLException ex) 
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_UpdateMouseClicked

    
    
    private void InsertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InsertMouseClicked
        // To add new catigory
        try 
         {
            MyConnection conn =new MyConnection();
            conn.connect();
            Statement st = conn.con.createStatement();
            st.executeUpdate("insert into bookCatigory (catName) values ('" + NewCat.getText() + "')");
            changeCatigory.addItem(NewCat.getText());
            changeCatigory.setSelectedItem(NewCat.getText());
            
            NewCat.setText("");
            JOptionPane.showMessageDialog(null, "The selected catigory has been added successfully"); 
            
            st.close();
            conn.con.close();
            
         }
        
        
        catch (SQLException ex) 
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_InsertMouseClicked

    
    
    private void changeCatigoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_changeCatigoryItemStateChanged
        // To display the selected item on textBox once I click on the item
        NewCat.setText(changeCatigory.getSelectedItem().toString());
    }//GEN-LAST:event_changeCatigoryItemStateChanged

    
    
    private void SearchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchButtonMouseClicked
        // Search book in book keeping tab
        int bookID;
        try
        {
            MyConnection conn =new MyConnection();
            conn.connect();
            Statement st = conn.con.createStatement();
            bookID = Integer.parseInt(bookName1.getText());
            ResultSet rs = st.executeQuery("Select * from books where bookID = " + bookID);
            // rs.next(); writting rs.next() here will result the condition to be always false, because this query retrieve only one row. rs.next() here moves
            // the rs cursor from the current row (before first row) to the first row. then I write the condition if (rs.next()) which will move the cursor again
            // from the current row (now first row) to the second row (which is nothing because this query gives only one row), then check the condition which will be always false.
            if(rs.next())
            {
             bookName2.setText(Integer.toString(rs.getInt("bookID")));
             bookName1.setText("");
            }
            else
            {
             JOptionPane.showMessageDialog(null, "The book ID you entered is invalid. Please check your entry"); 
            }
                        
                        
            //anylabel.setText(catigory.getSelectedItem().toString());
            st.close();
            conn.con.close();

        }

        catch (SQLException ex)
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ClassNotFoundException ex)
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SearchButtonMouseClicked

    
    
    private void changeStatusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changeStatusMouseClicked
        // To change book status
        try
        {
            MyConnection conn =new MyConnection();
            conn.connect();
            Statement st = conn.con.createStatement();
            st.executeUpdate("Update books set bookStatus = '" + bookStatus.getSelectedItem() + "' where bookID = " + Integer.parseInt(bookName2.getText()));
           
            JOptionPane.showMessageDialog(null, "The book status has been change successfully"); 
            st.close();
            conn.con.close();

        }

        catch (SQLException ex)
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ClassNotFoundException ex)
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_changeStatusMouseClicked

    
    
    private void clockInMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clockInMouseClicked
        // To save the time in which the librarian arrive to the library
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/YYYY hh:mm:ss aa"); // Wite the time in 12 hours format hh
        SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/YYYY HH:mm:ss");   // Write the time in 24 hours format HH
        // The current date
        Date today = new Date();
        String clockIn = sdf.format(today);
        message.setText("You arrived at " + clockIn);
            
       try
        {
            MyConnection conn =new MyConnection();
            conn.connect();
            PreparedStatement pst=conn.con.prepareStatement("insert into attendance (UID, clockIN) values (?,?)");
            pst.setInt(1, uid);
            pst.setString(2, clockIn);
            pst.execute();
            
            pst.close();
            conn.con.close();

        }

        catch (SQLException ex)
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ClassNotFoundException ex)
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }     
        
    }//GEN-LAST:event_clockInMouseClicked

    
    
    private void clockOutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clockOutMouseClicked
        // To save the time in which the librarian leaves the library
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/YYYY hh:mm:ss aa"); // Wite the time in 12 hours format hh
        SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/YYYY HH:mm:ss");   // Write the time in 24 hours format HH
        // The current date
        Date today = new Date();
        String clockOut = sdf.format(today);
        message.setText("You arrived at " + clockOut);
            
        try
        {
            MyConnection conn =new MyConnection();
            conn.connect();
            Statement st =conn.con.createStatement();
            ResultSet rs = st.executeQuery("select * from attendance where UID = " + uid + " order by clockIN desc limit 1");
            rs.next();
            String lastClockIn = rs.getString("clockIN");
            
            PreparedStatement pst=conn.con.prepareStatement("update attendance set clockOUT = ? where UID = ? and clockIN = ?");
            
            pst.setString(1, clockOut);
            pst.setInt(2, uid);
            pst.setString(3, lastClockIn);
            pst.execute();
            
            st.close();
            pst.close();
            conn.con.close();

        }

        catch (SQLException ex)
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ClassNotFoundException ex)
        {
            Logger.getLogger(Members.class.getName()).log(Level.SEVERE, null, ex);
        }     
            
            
    }//GEN-LAST:event_clockOutMouseClicked

    private void logOutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logOutMouseClicked
        // To log out the account
        uid = 0;
        this.setVisible(false);
        Login log =new Login();
        log.setVisible(true);
    }//GEN-LAST:event_logOutMouseClicked

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Librarians.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Librarians.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Librarians.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Librarians.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Librarians().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ClockInOut;
    private javax.swing.JButton Delete;
    private javax.swing.JButton DeleteSelectedItem;
    private javax.swing.JTextField Email;
    private javax.swing.JLabel Error;
    private javax.swing.JButton Insert;
    private javax.swing.JButton Insert1;
    private javax.swing.JPanel InsertBooks;
    private javax.swing.JTabbedPane JTabbed;
    private javax.swing.JScrollPane Jscroll;
    private javax.swing.JLabel Mini;
    private javax.swing.JButton Modify;
    private javax.swing.JTextField NewCat;
    private javax.swing.JButton Search;
    private javax.swing.JButton SearchButton;
    private javax.swing.JButton Update;
    private javax.swing.JPanel UpdateBookInfo;
    private javax.swing.JTextField UserName;
    private javax.swing.JButton addMember;
    private javax.swing.JPanel addMembers;
    private javax.swing.JPanel bookCatigories;
    private javax.swing.JPanel bookKeeping;
    private javax.swing.JTextField bookName;
    private javax.swing.JTextField bookName1;
    private javax.swing.JTextField bookName2;
    private javax.swing.JComboBox<String> bookStatus;
    private javax.swing.JTable bookTable;
    private javax.swing.JComboBox<String> catigory;
    private javax.swing.JComboBox<String> changeCatigory;
    private javax.swing.JButton changeStatus;
    private javax.swing.JButton clockIn;
    private javax.swing.JButton clockOut;
    private javax.swing.JLabel close;
    private javax.swing.JTextField fullName;
    private javax.swing.JComboBox<String> insertCat;
    private javax.swing.JTable insertTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea localAdd;
    private javax.swing.JLabel logOut;
    private javax.swing.JLabel message;
    private javax.swing.JTextField phone;
    private javax.swing.JPasswordField tempPwd;
    // End of variables declaration//GEN-END:variables
}
